{"version":3,"sources":["Player.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["options","audioLists","defaultPlayIndex","theme","bounds","preload","glassBg","remember","remove","defaultPosition","top","left","playModeText","order","orderLoop","singleLoop","shufflePlay","openText","closeText","checkedText","unCheckedText","notContentText","panelTitle","defaultPlayMode","mode","once","autoPlay","toggleMode","showMiniModeCover","showMiniProcessBar","drag","seeked","controllerTitle","showProgressLoadBar","showPlay","showReload","showDownload","showPlayMode","showThemeSwitch","showLyric","extendsContent","defaultVolume","playModeShowTime","loadAudioErrorPlayNext","autoHiddenCover","onAudioDownload","audioInfo","console","log","onAudioPlay","onAudioPause","onAudioSeeked","onAudioVolumeChange","currentVolume","onAudioEnded","onAudioAbort","e","onAudioProgress","onAudioReload","onAudioLoadError","error","onThemeChange","onAudioListsChange","currentPlayId","onAudioPlayTrackChange","onPlayModeChange","playMode","onModeChange","onAudioListsPanelChange","panelVisible","onAudioListsDragEnd","fromIndex","endIndex","onAudioLyricChange","lineNum","currentLyric","getContainer","document","body","getAudioInstance","audio","Player","state","params","ITEMS","loading","prevSearch","onAddAudio","audioData","data","setState","onShowGlassBg","onChangeKey","onDrag","onToggleMode","onSeeked","key","event","preventDefault","this","makeSearch","target","value","i","length","search","more","prev","items","flag","config","method","url","axios","then","res","list","audioList","amapp","name","singer","author","cover","imglnk","musicSrc","amrl","push","Object","entries","amap","title","thumb","replace","best_audio","map","yturl","changeOptions","catch","err","alert","perv","className","AppBar","position","style","background","Toolbar","Typography","variant","noWrap","marginLeft","marginRight","float","InputBase","placeholder","onKeyDown","keyCode","handleSearch","classes","root","color","input","padding","width","inputProps","fontFamily","height","pointerEvents","marginTop","Fab","onClick","loadMore","bgColor","spinnerColor","textColor","React","Component","Main","alignItems","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6e463d30.chunk.js","sourcesContent":["import React from 'react'\r\n//import ReactDOM from 'react-dom'\r\nimport HeadsetSharpIcon from '@material-ui/icons/HeadsetSharp';\r\nimport ReactJkMusicPlayer from \"react-jinke-music-player\";\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport RotateLeftSharpIcon from '@material-ui/icons/RotateLeftSharp';\r\nimport axios from 'axios';\r\nimport LoadingScreen from 'react-loading-screen';\r\n\r\nconst options = {\r\n    //audio lists model\r\n    audioLists: [\r\n        /*{\r\n            name: 'Despacito',\r\n            singer: 'Luis Fonsi',\r\n            cover:\r\n                'http://res.cloudinary.com/alick/image/upload/v1502689731/Despacito_uvolhp.jpg',\r\n            musicSrc: () => {\r\n                return Promise.resolve(\r\n                    'http://res.cloudinary.com/alick/video/upload/v1502689683/Luis_Fonsi_-_Despacito_ft._Daddy_Yankee_uyvqw9.mp3'\r\n                )\r\n            }\r\n        },\r\n        {\r\n            name: 'Bedtime Stories',\r\n            singer: 'Jay Chou',\r\n            cover:\r\n                'http://res.cloudinary.com/alick/image/upload/v1502375978/bedtime_stories_bywggz.jpg',\r\n            musicSrc:\r\n                'http://res.cloudinary.com/alick/video/upload/v1502375674/Bedtime_Stories.mp3'\r\n        },\r\n        {\r\n            name: '难得',\r\n            singer: '安来宁',\r\n            cover: '//cdn.lijinke.cn/nande.jpg',\r\n            musicSrc: '//cdn.lijinke.cn/nande.mp3'\r\n        }*/\r\n    ],\r\n    defaultPlayIndex: 0,\r\n\r\n    //if you want dynamic change current play audio you can change it [type `number` default `0`]\r\n    // playIndex: 0,\r\n\r\n    //color of the music player theme    [ type `string: 'light' or 'dark'  ` default 'dark' ]\r\n    theme: 'dark',\r\n\r\n    // Specifies movement boundaries. Accepted values:\r\n    // - `parent` restricts movement within the node's offsetParent\r\n    //    (nearest node with position relative or absolute), or\r\n    // - a selector, restricts movement within the targeted node\r\n    // - An object with `left, top, right, and bottom` properties.\r\n    //   These indicate how far in each direction the draggable\r\n    //   can be moved.\r\n    bounds: 'parent',\r\n\r\n    //Whether to load audio immediately after the page loads.  [type `Boolean | String`, default `false`]\r\n    //\"auto|metadata|none\" \"true| false\"\r\n    preload: true,\r\n\r\n    //Whether the player's background displays frosted glass effect  [type `Boolean`, default `false`]\r\n    glassBg: true,\r\n\r\n    //The next time you access the player, do you keep the last state  [type `Boolean` default `false`]\r\n    remember: true,\r\n\r\n    //The Audio Can be deleted  [type `Boolean`, default `true`]\r\n    remove: true,\r\n\r\n    //audio controller initial position    [ type `Object` default '{top:0,left:0}' ]\r\n    defaultPosition: {\r\n        top: 300,\r\n        left: 120\r\n    },\r\n\r\n    // play mode text config of the audio player\r\n    playModeText: {\r\n        order: 'All',\r\n        orderLoop: 'Repeat All',\r\n        singleLoop: 'Repeat Current',\r\n        shufflePlay: 'Shuffle'\r\n    },\r\n\r\n    //audio controller open text  [ type `String | ReactNode` default 'open']\r\n    openText: 'Open',\r\n\r\n    //audio controller close text  [ type `String | ReactNode` default 'close']\r\n    closeText: 'Close',\r\n\r\n    //audio theme switch checkedText  [ type `String | ReactNode` default '-']\r\n    checkedText: '-',\r\n\r\n    //audio theme switch unCheckedText [ type `String | ReactNode` default '-']\r\n    unCheckedText: '-',\r\n\r\n    // audio list panel show text of the playlist has no songs [ type `String` | ReactNode  default 'no music']\r\n    notContentText: 'No Song',\r\n\r\n    panelTitle: 'Playlist',\r\n\r\n    defaultPlayMode: 'order',\r\n\r\n    //audio mode        mini | full          [type `String`  default `mini`]\r\n    mode: 'mini',\r\n\r\n    /**\r\n     * [ type `Boolean` default 'false' ]\r\n     * The default audioPlay handle function will be played again after each pause, If you only want to trigger it once, you can set 'true'\r\n     */\r\n    once: true,\r\n\r\n    //Whether the audio is played after loading is completed. [type `Boolean` default 'true']\r\n    autoPlay: false,\r\n\r\n    //Whether you can switch between two modes, full => mini  or mini => full   [type 'Boolean' default 'true']\r\n    toggleMode: true,\r\n\r\n    //audio cover is show of the \"mini\" mode [type `Boolean` default 'true']\r\n    showMiniModeCover: true,\r\n\r\n    //audio playing progress is show of the \"mini\"  mode\r\n    showMiniProcessBar: false,\r\n\r\n    //audio controller is can be drag of the \"mini\" mode     [type `Boolean` default `true`]\r\n    drag: true,\r\n\r\n    //drag the audio progress bar [type `Boolean` default `true`]\r\n    seeked: true,\r\n\r\n    //audio controller title [type `String | ReactNode`  default <FaHeadphones/>]\r\n    controllerTitle: <HeadsetSharpIcon />,\r\n\r\n    //Displays the audio load progress bar.  [type `Boolean` default `true`]\r\n    showProgressLoadBar: true,\r\n\r\n    //play button display of the audio player panel   [type `Boolean` default `true`]\r\n    showPlay: true,\r\n\r\n    //reload button display of the audio player panel   [type `Boolean` default `true`]\r\n    showReload: true,\r\n\r\n    //download button display of the audio player panel   [type `Boolean` default `true`]\r\n    showDownload: false,\r\n\r\n    //loop button display of the audio player panel   [type `Boolean` default `true`]\r\n    showPlayMode: true,\r\n\r\n    //theme toggle switch  display of the audio player panel   [type `Boolean` default `true`]\r\n    showThemeSwitch: true,\r\n\r\n    //lyric display of the audio player panel   [type `Boolean` default `false`]\r\n    showLyric: false,\r\n\r\n    //Extensible custom content       [type 'Array' default '[]' ]\r\n    extendsContent: [],\r\n\r\n    //default volume of the audio player [type `Number` default `100` range `0-100`]\r\n    defaultVolume: 100,\r\n\r\n    //playModeText show time [type `Number(ms)` default `700`]\r\n    playModeShowTime: 600,\r\n\r\n    //Whether to try playing the next audio when the current audio playback fails [type `Boolean` default `true`]\r\n    loadAudioErrorPlayNext: true,\r\n\r\n    // Auto hide the cover photo if no cover photo is available [type `Boolean` default `false`]\r\n    autoHiddenCover: true,\r\n\r\n    //Music is downloaded handle\r\n    onAudioDownload(audioInfo) {\r\n        console.log('audio download', audioInfo)\r\n    },\r\n\r\n    //audio play handle\r\n    onAudioPlay(audioInfo) {\r\n        console.log('audio playing', audioInfo)\r\n    },\r\n\r\n    //audio pause handle\r\n    onAudioPause(audioInfo) {\r\n        console.log('audio pause', audioInfo)\r\n    },\r\n\r\n    //When the user has moved/jumped to a new location in audio\r\n    onAudioSeeked(audioInfo) {\r\n        console.log('audio seeked', audioInfo)\r\n    },\r\n\r\n    //When the volume has changed  min = 0.0  max = 1.0\r\n    onAudioVolumeChange(currentVolume) {\r\n        console.log('audio volume change', currentVolume)\r\n    },\r\n\r\n    //The single song is ended handle\r\n    onAudioEnded(audioInfo) {\r\n        // swal('Audio is ended!', '', 'success')\r\n        console.log('audio ended', audioInfo)\r\n    },\r\n\r\n    //audio load abort The target event like {...,audioName:xx,audioSrc:xx,playMode:xx}\r\n    onAudioAbort(e) {\r\n        console.log('audio abort', e)\r\n    },\r\n\r\n    //audio play progress handle\r\n    onAudioProgress(audioInfo) {\r\n        // console.log('audio progress',audioInfo);\r\n    },\r\n\r\n    //audio reload handle\r\n    onAudioReload(audioInfo) {\r\n        console.log('audio reload:', audioInfo)\r\n    },\r\n\r\n    //audio load failed error handle\r\n    onAudioLoadError(e) {\r\n        console.error('audio load err', e)\r\n    },\r\n\r\n    //theme change handle\r\n    onThemeChange(theme) {\r\n        console.log('theme change:', theme)\r\n    },\r\n\r\n    onAudioListsChange(currentPlayId, audioLists, audioInfo) {\r\n        console.log('[currentPlayId] audio lists change:', currentPlayId)\r\n        console.log('[audioLists] audio lists change:', audioLists)\r\n        console.log('[audioInfo] audio lists change:', audioInfo)\r\n    },\r\n\r\n    onAudioPlayTrackChange(currentPlayId, audioLists, audioInfo) {\r\n        console.log(\r\n            'audio play track change:',\r\n            currentPlayId,\r\n            audioLists,\r\n            audioInfo\r\n        )\r\n    },\r\n\r\n    onPlayModeChange(playMode) {\r\n        console.log('play mode change:', playMode)\r\n    },\r\n\r\n    onModeChange(mode) {\r\n        console.log('mode change:', mode)\r\n    },\r\n\r\n    onAudioListsPanelChange(panelVisible) {\r\n        console.log('audio lists panel visible:', panelVisible)\r\n    },\r\n\r\n    onAudioListsDragEnd(fromIndex, endIndex) {\r\n        console.log('audio lists drag end:', fromIndex, endIndex)\r\n    },\r\n\r\n    onAudioLyricChange(lineNum, currentLyric) {\r\n        console.log('audio lyric change:', lineNum, currentLyric)\r\n    },\r\n\r\n    // custom music player root node\r\n    getContainer() {\r\n        return document.body\r\n    },\r\n\r\n    /**\r\n     * @description get origin audio element instance , you can use it do everything\r\n     * @example\r\n     * audio.playbackRate = 1.5  // set play back rate\r\n     * audio.crossOrigin = 'xxx' // config cross origin\r\n     */\r\n    getAudioInstance(audio) {\r\n        console.log('audio instance', audio)\r\n    }\r\n    // transform audio info like return a Promise\r\n\r\n    /**\r\n     * @return\r\n     *  {\r\n     *    src: 'xxx',\r\n     *    filename: 'xxx',\r\n     *    mimeType: 'xxx'\r\n     *  }\r\n     */\r\n    // onBeforeAudioDownload() {\r\n    //   return Promise.resolve({\r\n    //     src: '1.mp3'\r\n    //   })\r\n    // }\r\n}\r\n//audioData\r\n/*\r\n{\r\n                    name: \"I'm new here\",\r\n                    singer: 'jack',\r\n                    cover: 'http://www.lijinke.cn/music/1387583682387727.jpg',\r\n                    musicSrc: `http://www.lijinke.cn/music/${Date.now()}.mp3`\r\n                }\r\n*/\r\nclass Player extends React.Component {\r\n    state = {\r\n        params: options,\r\n        ITEMS: [],\r\n        loading: false\r\n    }\r\n    prevSearch = \"<#NONE#>\";\r\n    onAddAudio = (audioData) => {\r\n        const data = {\r\n            ...this.state.params,\r\n            audioLists: [\r\n                ...this.state.params.audioLists,\r\n                audioData\r\n            ]\r\n        }\r\n        this.setState({\r\n            params: data\r\n        })\r\n    }\r\n    onShowGlassBg = () => {\r\n        this.onChangeKey('glassBg')\r\n    }\r\n    onDrag = () => {\r\n        this.onChangeKey('drag')\r\n    }\r\n    onToggleMode = () => {\r\n        this.onChangeKey('toggleMode')\r\n    }\r\n    onSeeked = () => {\r\n        this.onChangeKey('seeked')\r\n    }\r\n    onChangeKey = (key) => {\r\n        const data = {\r\n            ...this.state.params,\r\n            [key]: !this.state.params[key]\r\n        }\r\n        if (key === 'light' || key === 'dark') {\r\n            data.theme = key\r\n        }\r\n        if (key === 'full' || key === 'mini') {\r\n            data.mode = key\r\n        }\r\n        this.setState({ params: data })\r\n    }\r\n    showMiniProcessBar = () => {\r\n        this.onChangeKey('showMiniProcessBar')\r\n    }\r\n    showMiniModeCover = () => {\r\n        this.onChangeKey('showMiniModeCover')\r\n    }\r\n    handleSearch(event) {\r\n        event.preventDefault();\r\n        this.setState({ loading: true });\r\n        this.makeSearch(event.target.value, 0, [], 10, 0);\r\n        this.prevSearch = event.target.value;\r\n    }\r\n    changeOptions(audio) {\r\n        for (var i = 0; i < audio.length; i++)\r\n            this.onAddAudio(audio[i]);\r\n    }\r\n    makeSearch(search, more, prev, items, flag) {\r\n        this.prevSearch = search;\r\n        var config = {\r\n            method: 'post',\r\n            url: 'https://gray-server.herokuapp.com/youtube',\r\n            data: {\r\n                search: search,\r\n                items: items,\r\n                more: more,\r\n                prev: prev\r\n            }\r\n        }\r\n        axios(config).then((res) => {\r\n            console.log(res.data);\r\n            var data = res.data;\r\n            var list = [];\r\n            var audioList = [];\r\n            for (var value in this.state.ITEMS) {\r\n                var amapp = {\r\n                    name: value.name,\r\n                    singer: value.author,\r\n                    cover: value.imglnk,\r\n                    musicSrc: value.amrl\r\n                }\r\n                audioList.push(amapp);\r\n            }\r\n            for (const [key, value] of Object.entries(data.data)) {\r\n                //console.log(key, value);\r\n                var amap = {\r\n                    name: value.title,\r\n                    singer: value.author,\r\n                    cover: value.thumb.replace('default', 'mqdefault'),\r\n                    musicSrc: value.best_audio.url\r\n                }\r\n                audioList.push(amap);\r\n                var map = {\r\n                    yturl: key,\r\n                    name: value.title,\r\n                    author: value.author,\r\n                    amrl: value.best_audio.url,\r\n                    imglnk: value.thumb.replace('default', 'mqdefault')\r\n                }\r\n                list.push(map);\r\n            }\r\n            //itemHandler(list, flag);\r\n            //console.log(audioList);\r\n            this.changeOptions(audioList);\r\n            this.setState({ loading: false });\r\n        }).catch((err) => { console.log(err);this.setState({ loading: false }); alert('Error communicating with server'); });\r\n    }\r\n    loadMore(event) {\r\n        event.preventDefault();\r\n        if (this.prevSearch === \"<#NONE#>\")\r\n            return;\r\n        var perv = [];\r\n        for (var i = 0; i < this.state.ITEMS.length; i++) {\r\n            perv.push(this.state.ITEMS[i].yturl);\r\n        }\r\n        this.makeSearch(this.prevSearch, 1, perv, 5, 0);\r\n    }\r\n    render() {\r\n        const { params } = this.state;\r\n        console.log('params: ', params)\r\n        return (\r\n            <>\r\n                <div className=\"classes.root\">\r\n                    <AppBar position=\"static\" style={{ background: '#1C1C1C' }}>\r\n                        <Toolbar>\r\n                            <Typography className=\"classes.title\" variant=\"h6\" noWrap>\r\n                                GrayBot - Web\r\n                            </Typography>\r\n                            <div style={{ marginLeft: 'auto', marginRight: 0, float: 'right' }}>\r\n                                <InputBase\r\n                                    placeholder=\"Search…\"\r\n                                    onKeyDown={(e) => { e.keyCode === 13 ? this.handleSearch(e) : console.log(0) }}\r\n                                    classes={{\r\n                                        root: {\r\n                                            color: '#FFFFFF',\r\n                                        },\r\n                                        input: {\r\n                                            padding: (1, 1, 1, 7),\r\n                                            width: '100%',\r\n                                        },\r\n                                    }}\r\n                                    inputProps={{ style: { fontFamily: 'Arial', color: 'white', 'aria-label': 'search' } }}\r\n                                >\r\n                                    <SearchIcon style={{\r\n                                        height: '100%',\r\n                                        pointerEvents: 'none',\r\n                                        marginTop: 2\r\n                                    }} />\r\n                                </InputBase>\r\n                            </div>\r\n                        </Toolbar>\r\n                    </AppBar>\r\n                </div>\r\n                <div className=\"classesAB.root\">\r\n                    <Fab variant=\"extended\" onClick={(event) => { console.log(\"MORE CLICKED\"); this.loadMore(event) }}>\r\n                        <RotateLeftSharpIcon className=\"classesAB.extendedIcon\" />\r\n                        Load More\r\n                    </Fab>\r\n                    <LoadingScreen\r\n                        loading={this.state.loading}\r\n                        bgColor='#f1f1f1'\r\n                        spinnerColor='#9ee5f8'\r\n                        textColor='#676767'\r\n                    ></LoadingScreen>\r\n                </div>\r\n                    <ReactJkMusicPlayer {...params} />\r\n            </>\r\n                );\r\n            }\r\n        }\r\nexport default Player;","import React from 'react';\r\n//import AppBar from '@material-ui/core/AppBar';\r\n//import Toolbar from '@material-ui/core/Toolbar';\r\n//import IconButton from '@material-ui/core/IconButton';\r\n//import Typography from '@material-ui/core/Typography';\r\n//import { fade, makeStyles } from '@material-ui/core/styles';\r\n//import SearchIcon from '@material-ui/icons/Search';\r\n//import InputBase from '@material-ui/core/InputBase';\r\n//import axios from 'axios';\r\n//import ReactJkMusicPlayer from \"react-jinke-music-player\";\r\nimport \"react-jinke-music-player/assets/index.css\";\r\n//import HeadsetSharpIcon from '@material-ui/icons/HeadsetSharp';\r\n//import Fab from '@material-ui/core/Fab';\r\n//import RotateLeftSharpIcon from '@material-ui/icons/RotateLeftSharp';\r\nimport Player from './Player';\r\n/*\r\nconst useStylesAB = makeStyles(theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n        display: 'none',\r\n        [theme.breakpoints.up('sm')]: {\r\n            display: 'block',\r\n        },\r\n    },\r\n    search: {\r\n        position: 'relative',\r\n        borderRadius: theme.shape.borderRadius,\r\n        backgroundColor: fade(theme.palette.common.white, 0.15),\r\n        '&:hover': {\r\n            backgroundColor: fade(theme.palette.common.white, 0.25),\r\n        },\r\n        marginLeft: 0,\r\n        width: '100%',\r\n        [theme.breakpoints.up('sm')]: {\r\n            marginLeft: theme.spacing(1),\r\n            width: 'auto',\r\n        },\r\n    },\r\n    searchIcon: {\r\n        width: theme.spacing(7),\r\n        height: '100%',\r\n        position: 'absolute',\r\n        pointerEvents: 'none',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    inputRoot: {\r\n        color: 'inherit',\r\n    },\r\n    inputInput: {\r\n        padding: theme.spacing(1, 1, 1, 7),\r\n        transition: theme.transitions.create('width'),\r\n        width: '100%',\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: 120,\r\n            '&:focus': {\r\n                width: 200,\r\n            },\r\n        },\r\n    },\r\n}));\r\n\r\nconst useStylesActBut = makeStyles(theme => ({\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n        },\r\n        alignContent: \"center\"\r\n    },\r\n    extendedIcon: {\r\n        marginRight: theme.spacing(1),\r\n    },\r\n}));\r\n*/\r\nexport default function Main() {\r\n    /*function SearchAppBar() {\r\n        const classes = useStylesAB();\r\n        const classesAB = useStylesActBut();\r\n        const [ITEMS, setItems] = React.useState([]);\r\n        var defoptions = {\r\n            audioLists: [],\r\n            defaultPlayIndex: 0,\r\n            theme: 'dark',\r\n            bounds: 'body',\r\n            preload: true,\r\n            glassBg: true,\r\n            remember: true,\r\n            remove: true,\r\n            defaultPosition: {\r\n                top: 300,\r\n                left: 120\r\n            },\r\n            playModeText: {\r\n                order: 'once',\r\n                orderLoop: 'loop all',\r\n                singleLoop: 'loop current',\r\n                shufflePlay: 'shuffle'\r\n            },\r\n            openText: 'open',\r\n            closeText: 'close',\r\n            checkedText: '-',\r\n            unCheckedText: '-',\r\n            notContentText: 'no music',\r\n            panelTitle: 'Playlist',\r\n            defaultPlayMode: 'order',\r\n            mode: 'full',\r\n            once: true,\r\n            autoPlay: true,\r\n            toggleMode: true,\r\n            showMiniModeCover: true,\r\n            showMiniProcessBar: false,\r\n            drag: true,\r\n            seeked: true,\r\n            controllerTitle: <HeadsetSharpIcon />,\r\n            showProgressLoadBar: true,\r\n            showPlay: true,\r\n            showReload: true,\r\n            showDownload: true,\r\n            showPlayMode: true,\r\n            showThemeSwitch: true,\r\n            showLyric: false,\r\n            extendsContent: [],\r\n            defaultVolume: 100,\r\n            playModeShowTime: 600,\r\n            loadAudioErrorPlayNext: true,\r\n            autoHiddenCover: true,\r\n            onAudioDownload(audioInfo) {\r\n                console.log('audio download', audioInfo)\r\n            },\r\n            onAudioPlay(audioInfo) {\r\n                console.log('audio playing', audioInfo)\r\n            },\r\n            onAudioPause(audioInfo) {\r\n                console.log('audio pause', audioInfo)\r\n            },\r\n            onAudioSeeked(audioInfo) {\r\n                console.log('audio seeked', audioInfo)\r\n            },\r\n            onAudioVolumeChange(currentVolume) {\r\n                console.log('audio volume change', currentVolume)\r\n            },\r\n            onAudioEnded(audioInfo) {\r\n                console.log('audio ended', audioInfo)\r\n            },\r\n            onAudioAbort(e) {\r\n                console.log('audio abort', e)\r\n            },\r\n            onAudioProgress(audioInfo) {\r\n            },\r\n            onAudioReload(audioInfo) {\r\n                console.log('audio reload:', audioInfo)\r\n            },\r\n            onAudioLoadError(e) {\r\n                console.error('audio load err', e)\r\n            },\r\n            onThemeChange(theme) {\r\n                console.log('theme change:', theme)\r\n            },\r\n            onAudioListsChange(currentPlayId, audioLists, audioInfo) {\r\n                console.log('[currentPlayId] audio lists change:', currentPlayId)\r\n                console.log('[audioLists] audio lists change:', audioLists)\r\n                console.log('[audioInfo] audio lists change:', audioInfo)\r\n            },\r\n            onAudioPlayTrackChange(currentPlayId, audioLists, audioInfo) {\r\n                console.log(\r\n                    'audio play track change:',\r\n                    currentPlayId,\r\n                    audioLists,\r\n                    audioInfo\r\n                )\r\n            },\r\n\r\n            onPlayModeChange(playMode) {\r\n                console.log('play mode change:', playMode)\r\n            },\r\n\r\n            onModeChange(mode) {\r\n                console.log('mode change:', mode)\r\n            },\r\n\r\n            onAudioListsPanelChange(panelVisible) {\r\n                console.log('audio lists panel visible:', panelVisible)\r\n            },\r\n\r\n            onAudioListsDragEnd(fromIndex, endIndex) {\r\n                console.log('audio lists drag end:', fromIndex, endIndex)\r\n            },\r\n\r\n            onAudioLyricChange(lineNum, currentLyric) {\r\n                console.log('audio lyric change:', lineNum, currentLyric)\r\n            },\r\n\r\n            // custom music player root node\r\n            getContainer() {\r\n                return document.body\r\n            },\r\n            getAudioInstance(audio) {\r\n                console.log('audio instance', audio)\r\n            }\r\n\r\n            // transform audio info like return a Promise\r\n            // onBeforeAudioDownload() {\r\n            //   return Promise.resolve({\r\n            //     src: '1.mp3'\r\n            //   })\r\n            // }\r\n        };\r\n        var prevSearch = \"<#NONE#>\"\r\n        const [options, setOptions] = React.useState(defoptions);\r\n        function changeOptions(audioList) {\r\n            var lsts = options.audioLists;\r\n            //lsts.concat(audioList);\r\n            console.log(audioList);\r\n            for(var i=0;i<audioList.length;i++)\r\n            {\r\n                lsts.push(audioList[i]);\r\n            }\r\n            console.log(lsts);\r\n            var ndefoptions ={\r\n                audioLists: lsts,\r\n                defaultPlayIndex: 0,\r\n                theme: 'dark',\r\n                bounds: 'body',\r\n                preload: true,\r\n                glassBg: false,\r\n                remember: true,\r\n                remove: true,\r\n                defaultPosition: {\r\n                    top: 300,\r\n                    left: 120\r\n                },\r\n                playModeText: {\r\n                    order: 'once',\r\n                    orderLoop: 'loop all',\r\n                    singleLoop: 'loop current',\r\n                    shufflePlay: 'shuffle'\r\n                },\r\n                openText: 'open',\r\n                closeText: 'close',\r\n                checkedText: '-',\r\n                unCheckedText: '-',\r\n                notContentText: 'no music',\r\n                panelTitle: 'Playlist',\r\n                defaultPlayMode: 'order',\r\n                mode: 'full',\r\n                once: true,\r\n                autoPlay: true,\r\n                toggleMode: true,\r\n                showMiniModeCover: true,\r\n                showMiniProcessBar: false,\r\n                drag: true,\r\n                seeked: true,\r\n                controllerTitle: <HeadsetSharpIcon />,\r\n                showProgressLoadBar: true,\r\n                showPlay: true,\r\n                showReload: true,\r\n                showDownload: true,\r\n                showPlayMode: true,\r\n                showThemeSwitch: true,\r\n                showLyric: false,\r\n                extendsContent: [],\r\n                defaultVolume: 100,\r\n                playModeShowTime: 600,\r\n                loadAudioErrorPlayNext: true,\r\n                autoHiddenCover: true,\r\n                onAudioDownload(audioInfo) {\r\n                    console.log('audio download', audioInfo)\r\n                },\r\n                onAudioPlay(audioInfo) {\r\n                    console.log('audio playing', audioInfo)\r\n                },\r\n                onAudioPause(audioInfo) {\r\n                    console.log('audio pause', audioInfo)\r\n                },\r\n                onAudioSeeked(audioInfo) {\r\n                    console.log('audio seeked', audioInfo)\r\n                },\r\n                onAudioVolumeChange(currentVolume) {\r\n                    console.log('audio volume change', currentVolume)\r\n                },\r\n                onAudioEnded(audioInfo) {\r\n                    console.log('audio ended', audioInfo)\r\n                },\r\n                onAudioAbort(e) {\r\n                    console.log('audio abort', e)\r\n                },\r\n                onAudioProgress(audioInfo) {\r\n                },\r\n                onAudioReload(audioInfo) {\r\n                    console.log('audio reload:', audioInfo)\r\n                },\r\n                onAudioLoadError(e) {\r\n                    console.error('audio load err', e)\r\n                },\r\n                onThemeChange(theme) {\r\n                    console.log('theme change:', theme)\r\n                },\r\n                onAudioListsChange(currentPlayId, audioLists, audioInfo) {\r\n                    console.log('[currentPlayId] audio lists change:', currentPlayId)\r\n                    console.log('[audioLists] audio lists change:', audioLists)\r\n                    console.log('[audioInfo] audio lists change:', audioInfo)\r\n                },\r\n                onAudioPlayTrackChange(currentPlayId, audioLists, audioInfo) {\r\n                    console.log(\r\n                        'audio play track change:',\r\n                        currentPlayId,\r\n                        audioLists,\r\n                        audioInfo\r\n                    )\r\n                },\r\n    \r\n                onPlayModeChange(playMode) {\r\n                    console.log('play mode change:', playMode)\r\n                },\r\n    \r\n                onModeChange(mode) {\r\n                    console.log('mode change:', mode)\r\n                },\r\n    \r\n                onAudioListsPanelChange(panelVisible) {\r\n                    console.log('audio lists panel visible:', panelVisible)\r\n                },\r\n    \r\n                onAudioListsDragEnd(fromIndex, endIndex) {\r\n                    console.log('audio lists drag end:', fromIndex, endIndex)\r\n                },\r\n    \r\n                onAudioLyricChange(lineNum, currentLyric) {\r\n                    console.log('audio lyric change:', lineNum, currentLyric)\r\n                },\r\n    \r\n                // custom music player root node\r\n                getContainer() {\r\n                    return document.body\r\n                },\r\n                getAudioInstance(audio) {\r\n                    console.log('audio instance', audio)\r\n                }\r\n            };\r\n            console.log(ndefoptions);\r\n            setOptions(ndefoptions);\r\n        }\r\n        /*function listItems(lst) {\r\n            var i = 0;\r\n            return lst.map(item =>\r\n                <ListItem key={i++}>\r\n                    <ListItemAvatar>\r\n                        <Avatar>\r\n                            <img\r\n                                src={item.imglnk}\r\n                                alt={item.author}\r\n                                onClick={(e) => { e.preventDefault();}}\r\n                            />\r\n                        </Avatar>\r\n                    </ListItemAvatar>\r\n                    <ListItemText\r\n                        primary={item.name}\r\n                        secondary={item.author}\r\n                    />\r\n                    <ListItemSecondaryAction>\r\n                        <IconButton edge=\"end\" aria-label=\"delete\">\r\n                            <PlayArrowSharpIcon />\r\n                        </IconButton>\r\n                    </ListItemSecondaryAction>\r\n                </ListItem>\r\n            );\r\n        }\r\n        function itemHandler(newData, flag) {\r\n            if (flag === 0) {\r\n                var ni = ITEMS;\r\n                ni.push(newData);\r\n                setItems(ni);\r\n            }\r\n            else {\r\n                setItems(newData);\r\n            }\r\n        }\r\n        function loadMore(event) {\r\n            event.preventDefault();\r\n            if (prevSearch === \"<#NONE#>\")\r\n                return;\r\n            var perv = [];\r\n            for (var itm in ITEMS) {\r\n                perv.push(itm.yturl);\r\n            }\r\n            makeSearch(prevSearch, 1, perv, 5, 0);\r\n        }\r\n        function makeSearch(search, more, prev, items, flag) {\r\n            prevSearch = search;\r\n            var config = {\r\n                method: 'post',\r\n                url: 'https://gray-server.herokuapp.com/youtube',\r\n                data: {\r\n                    search: search,\r\n                    items: items,\r\n                    more: more,\r\n                    prev: prev\r\n                }\r\n            }\r\n            axios(config).then((res) => {\r\n                console.log(res.data);\r\n                var data = res.data;\r\n                var list = [];\r\n                var audioList = [];\r\n                for (var value in ITEMS) {\r\n                    var amapp = {\r\n                        name: value.name,\r\n                        singer: value.author,\r\n                        cover: value.imglnk,\r\n                        musicSrc: value.amrl\r\n                    }\r\n                    audioList.push(amapp);\r\n                }\r\n                for (const [key, value] of Object.entries(data.data)) {\r\n                //console.log(key, value);\r\n                var amap = {\r\n                    name: value.title,\r\n                    singer: value.author,\r\n                    cover: value.thumb,\r\n                    musicSrc: value.best_audio.url\r\n                }\r\n                audioList.push(amap);\r\n                var map = {\r\n                    yturl: key,\r\n                    name: value.title,\r\n                    author: value.author,\r\n                    amrl: value.best_audio.url,\r\n                    imglnk: value.thumb\r\n                }\r\n                list.push(map);\r\n            }\r\n            itemHandler(list, flag);\r\n            console.log(audioList);\r\n            changeOptions(audioList);\r\n        }).catch ((err) => { console.log(err) });\r\n    }\r\n    function handleSearch(event) {\r\n        event.preventDefault();\r\n        makeSearch(event.target.value, 1, [], 10, 0);\r\n        //prevSearch = event.target.value;\r\n        //loadMore(event);\r\n        prevSearch = event.target.value;\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={classes.root}>\r\n                <AppBar position=\"static\" style={{ background: '#1C1C1C' }}>\r\n                    <Toolbar>\r\n                        <IconButton\r\n                            edge=\"start\"\r\n                            className={classes.menuButton}\r\n                            color=\"inherit\"\r\n                            aria-label=\"open drawer\"\r\n                        >\r\n                        </IconButton>\r\n                        <Typography className={classes.title} variant=\"h6\" noWrap>\r\n                            GrayBot - Web\r\n                        </Typography>\r\n                        <div className={classes.search}>\r\n                            <div className={classes.searchIcon}>\r\n                                <SearchIcon />\r\n                            </div>\r\n                            <InputBase\r\n                                placeholder=\"Search…\"\r\n                                classes={{\r\n                                    root: classes.inputRoot,\r\n                                    input: classes.inputInput,\r\n                                }}\r\n                                onKeyDown={(e) => { e.keyCode === 13 ? handleSearch(e) : console.log(0) }}\r\n                                inputProps={{ 'aria-label': 'search' }}\r\n                            />\r\n                        </div>\r\n                    </Toolbar>\r\n                </AppBar>\r\n            </div>\r\n            <div className={classesAB.root}>\r\n                <Fab variant=\"extended\">\r\n                    <RotateLeftSharpIcon onClick={(event) => { loadMore(event) }} className={classesAB.extendedIcon} />\r\n                    Load More\r\n                    </Fab>\r\n            </div>\r\n            <ReactJkMusicPlayer {...options} />\r\n        </div>\r\n    );\r\n}*/\r\nreturn (\r\n    <div style={{ alignItems: \"center\" }}>\r\n        <Player />\r\n    </div>\r\n);\r\n}","import React from 'react';\nimport Main from './Main';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main/>\n    </div>\n  );\n}\n\nexport default App;\n\n/*\n<div className={classesLST.demo}>\n                                <List dense={false}>\n                                    {listItems(ITEMS)}\n                                </List>\n                            </div>\n*/","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}